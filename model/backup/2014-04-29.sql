--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

SET search_path = public, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: post; Type: TABLE; Schema: public; Owner: evanbyrne; Tablespace: 
--

CREATE TABLE post (
    id integer NOT NULL,
    url text NOT NULL
);


ALTER TABLE public.post OWNER TO evanbyrne;

--
-- Name: post_id_seq; Type: SEQUENCE; Schema: public; Owner: evanbyrne
--

CREATE SEQUENCE post_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.post_id_seq OWNER TO evanbyrne;

--
-- Name: post_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: evanbyrne
--

ALTER SEQUENCE post_id_seq OWNED BY post.id;


--
-- Name: post_meta; Type: TABLE; Schema: public; Owner: evanbyrne; Tablespace: 
--

CREATE TABLE post_meta (
    post_id integer NOT NULL,
    key text NOT NULL,
    value text NOT NULL
);


ALTER TABLE public.post_meta OWNER TO evanbyrne;

--
-- Name: id; Type: DEFAULT; Schema: public; Owner: evanbyrne
--

ALTER TABLE ONLY post ALTER COLUMN id SET DEFAULT nextval('post_id_seq'::regclass);


--
-- Data for Name: post; Type: TABLE DATA; Schema: public; Owner: evanbyrne
--

COPY post (id, url) FROM stdin;
3	/blog/stop-using-em
4	/blog/css-animations-with-javascript
5	/blog/stripe-for-android-prototype
6	/blog/learning-go
2	/blog
8	/resume
9	/blog/spring-cleaning
7	/blog/go-production-server-ubuntu-nginx
1	/
11	/preview/father-son-time-with-darth-vader
10	/blog/sql-tuning-db2
\.


--
-- Name: post_id_seq; Type: SEQUENCE SET; Schema: public; Owner: evanbyrne
--

SELECT pg_catalog.setval('post_id_seq', 11, true);


--
-- Data for Name: post_meta; Type: TABLE DATA; Schema: public; Owner: evanbyrne
--

COPY post_meta (post_id, key, value) FROM stdin;
5		
5	markdown	date  : December 4, 2013\r\ntitle : Stripe For Android Prototype\r\nurl   : /blog/stripe-for-android-prototype\r\n\r\nPublished an Android app today as part of a group school project. The app basically just allows users to view and edit charges made to their [Stripe](https://stripe.com/) accounts.\r\n\r\nBeware though, this is a prototype. I know of at least one bug. Also, due to this being a school group project I do not have the ability to publish updates, because the university controls the account used to publish the app. So, **do not use it**. :)\r\n\r\n[Google Play store link](https://play.google.com/store/apps/details?id=edu.cmich.cps396m.stripemanager&hl=en).
5	template	post
5	date	December 4, 2013
5	title	Stripe For Android Prototype
5	content	<p>Published an Android app today as part of a group school project. The app basically just allows users to view and edit charges made to their <a href="https://stripe.com/">Stripe</a> accounts.</p>\n\n<p>Beware though, this is a prototype. I know of at least one bug. Also, due to this being a school group project I do not have the ability to publish updates, because the university controls the account used to publish the app. So, <strong>do not use it</strong>. :)</p>\n\n<p><a href="https://play.google.com/store/apps/details?id=edu.cmich.cps396m.stripemanager&amp;hl=en">Google Play store link</a>.</p>\n
3		
3	markdown	date  : August 8, 2013\r\ntitle : Stop Using em\r\nurl   : /blog/stop-using-em\r\n\r\nUse of the `em` unit of measurement has been pretty heavily promoted by the web development community. Typically, it is used in replacement of `px` for specifying font sizes. Unlike px, the em unit scales up and down with whatever default font size is set for the web browser. This makes it more user-friendly than px for visually-impaired users who configure their web browsers' to use larger default font sizes.\r\n\r\n### How em Works\r\n\r\nThe em is a relative unit of measurement. One em is equal to the parent element's font size. Two em is twice the parent element's font size. So, if the initial font size set by the browser is 16px, then 2em = 32px. Unless, of course, another parent element changes the font size. This is where things get confusing. Consider the following:\r\n\r\n    .e1 {\r\n        font-size: 2em;\r\n    }\r\n    \r\n    .e2 {\r\n        font-size: 1.5em;\r\n    }\r\n\r\nSo all elements with the `e1` class should be 32px and all elements with the `e2` class should be 24px. But what if one of these elements is nested inside the other? Since em uses the parent element's font size to determine the current element's font size, nesting e2 inside of e1 will produce an element with text the size of 48px. As any web developer may imagine, this can cause a lot of confusion when there's a lot of nesting going on in the DOM.\r\n\r\n### Introducing rem: A Better Solution\r\n\r\nLuckily, we also have the `rem` unit. It's exactly the same as em, but it's always relative to the root element's font size.\r\n\r\n    .e1 {\r\n        font-size: 2rem;\r\n    }\r\n    \r\n    .e2 {\r\n        font-size: 1.5rem;\r\n    }\r\n\r\nNow nesting e1 and e2 shouldn't cause their font sizes to become increasingly large.\r\n\r\n### Compatibility\r\n\r\nAlthough the rem unit works with [most browsers](http://caniuse.com/rem), old versions of IE don't like it. If support of IE 8 or lower is needed, then just add the px size right before specifying the rem size.\r\n\r\n    .e1 {\r\n        font-size: 32px;\r\n        font-size: 2rem;\r\n    }\r\n    \r\n    .e2 {\r\n        font-size: 24px;\r\n        font-size: 1.5rem;\r\n    }\r\n\r\nModern web browsers will use rem and old browsers will fallback on the set px value. This also adds a little readability to the CSS by providing the px value for easy reference.
3	template	post
3	date	August 8, 2013
3	title	Stop Using em
4		
6		
6	markdown	date  : December 15, 2013\r\ntitle : Learning Go\r\nurl   : /blog/learning-go\r\n\r\nI'm currently in the process of learning the [Go programming language](http://golang.org/). I'm not only doing this because I believe that it's important to keep my tool belt up-to-date by learning new technologies, but also because there are a number of things about Go that I find appealing. Here are the big two:\r\n\r\n### 1. It's Compiled\r\n\r\nFirst of all, Go is a compiled language. I just love the idea of compiling code before running it. Plus the Go compiler does a fantastic job of detecting and explaining syntax errors and warnings. In a way, the compilation process feels like a unit test to me. Also, unlike with other compiled languages, Go makes the development process relatively painless. Just run `go run my_program.go` from the terminal and Go compiles and runs your source code.\r\n\r\n### 2. Built-In Web Server\r\n\r\nGo actually has a pretty decent web server built right into it, which supports HTTPS and multiprocessing right out of the box. Writing a basic HTTP file server only takes a [few lines of code](https://github.com/evantbyrne/go-fun/blob/master/http_server/file.go). I'm primarily a web developer, so the relative simplicity and completeness of the HTTP library is a huge bonus for me. Being able to compile and run a web application without needing to setup and maintain complex and bloated software like Apache is a dream come true.\r\n\r\n### Blog Experiment\r\n\r\nRight now I'm creating a [simple blog application](https://github.com/evantbyrne/go-blog) with Go. At the moment it only has basic CRUD capabilities, but perhaps I'll add authentication at some point. My main goal of this project is to get a good understanding of the strengths and weaknesses of the language. Here's a short list of my impressions so far:\r\n\r\n* Imports behave in a way that seems slightly odd to me.\r\n* Templates work well.\r\n* Reading form data is easy.\r\n* Go provides SQL interfaces, but developers have to use 3rd-party database drivers. I'm using [lib/pq](https://github.com/lib/pq).\r\n* Running SQL select queries is a pretty laborious process; but exec queries are easy.\r\n* The default URL router is overly simplistic, but it is usable and very extendable.\r\n\r\nGo contains all of the components needed to create web applications, but I found myself having to create a lot of helper functions to simplify basic tasks. The most notable example of this was running SQL select queries. So, I'll probably be creating a ___small___ framework at some point to make things easier for myself and others.
6	template	post
6	date	December 15, 2013
6	title	Learning Go
6	content	<p>I'm currently in the process of learning the <a href="http://golang.org/">Go programming language</a>. I'm not only doing this because I believe that it's important to keep my tool belt up-to-date by learning new technologies, but also because there are a number of things about Go that I find appealing. Here are the big two:</p>\n\n<h3>1. It's Compiled</h3>\n\n<p>First of all, Go is a compiled language. I just love the idea of compiling code before running it. Plus the Go compiler does a fantastic job of detecting and explaining syntax errors and warnings. In a way, the compilation process feels like a unit test to me. Also, unlike with other compiled languages, Go makes the development process relatively painless. Just run <code>go run my_program.go</code> from the terminal and Go compiles and runs your source code.</p>\n\n<h3>2. Built-In Web Server</h3>\n\n<p>Go actually has a pretty decent web server built right into it, which supports HTTPS and multiprocessing right out of the box. Writing a basic HTTP file server only takes a <a href="https://github.com/evantbyrne/go-fun/blob/master/http_server/file.go">few lines of code</a>. I'm primarily a web developer, so the relative simplicity and completeness of the HTTP library is a huge bonus for me. Being able to compile and run a web application without needing to setup and maintain complex and bloated software like Apache is a dream come true.</p>\n\n<h3>Blog Experiment</h3>\n\n<p>Right now I'm creating a <a href="https://github.com/evantbyrne/go-blog">simple blog application</a> with Go. At the moment it only has basic CRUD capabilities, but perhaps I'll add authentication at some point. My main goal of this project is to get a good understanding of the strengths and weaknesses of the language. Here's a short list of my impressions so far:</p>\n\n<ul>\n<li>Imports behave in a way that seems slightly odd to me.</li>\n<li>Templates work well.</li>\n<li>Reading form data is easy.</li>\n<li>Go provides SQL interfaces, but developers have to use 3rd-party database drivers. I'm using <a href="https://github.com/lib/pq">lib/pq</a>.</li>\n<li>Running SQL select queries is a pretty laborious process; but exec queries are easy.</li>\n<li>The default URL router is overly simplistic, but it is usable and very extendable.</li>\n</ul>\n\n<p>Go contains all of the components needed to create web applications, but I found myself having to create a lot of helper functions to simplify basic tasks. The most notable example of this was running SQL select queries. So, I'll probably be creating a <strong><em>small</em></strong> framework at some point to make things easier for myself and others.</p>\n
3	content	<p>Use of the <code>em</code> unit of measurement has been pretty heavily promoted by the web development community. Typically, it is used in replacement of <code>px</code> for specifying font sizes. Unlike px, the em unit scales up and down with whatever default font size is set for the web browser. This makes it more user-friendly than px for visually-impaired users who configure their web browsers' to use larger default font sizes.</p>\n\n<h3>How em Works</h3>\n\n<p>The em is a relative unit of measurement. One em is equal to the parent element's font size. Two em is twice the parent element's font size. So, if the initial font size set by the browser is 16px, then 2em = 32px. Unless, of course, another parent element changes the font size. This is where things get confusing. Consider the following:</p>\n\n<pre>.e1 {\n    font-size: 2em;\n}\n\n.e2 {\n    font-size: 1.5em;\n}</pre>\n\n<p>So all elements with the <code>e1</code> class should be 32px and all elements with the <code>e2</code> class should be 24px. But what if one of these elements is nested inside the other? Since em uses the parent element's font size to determine the current element's font size, nesting e2 inside of e1 will produce an element with text the size of 48px. As any web developer may imagine, this can cause a lot of confusion when there's a lot of nesting going on in the DOM.</p>\n\n<h3>Introducing rem: A Better Solution</h3>\n\n<p>Luckily, we also have the <code>rem</code> unit. It's exactly the same as em, but it's always relative to the root element's font size.</p>\n\n<pre>.e1 {\n    font-size: 2rem;\n}\n\n.e2 {\n    font-size: 1.5rem;\n}</pre>\n\n<p>Now nesting e1 and e2 shouldn't cause their font sizes to become increasingly large.</p>\n\n<h3>Compatibility</h3>\n\n<p>Although the rem unit works with <a href="http://caniuse.com/rem">most browsers</a>, old versions of IE don't like it. If support of IE 8 or lower is needed, then just add the px size right before specifying the rem size.</p>\n\n<pre>.e1 {\n    font-size: 32px;\n    font-size: 2rem;\n}\n\n.e2 {\n    font-size: 24px;\n    font-size: 1.5rem;\n}</pre>\n\n<p>Modern web browsers will use rem and old browsers will fallback on the set px value. This also adds a little readability to the CSS by providing the px value for easy reference.</p>\n
4	markdown	date  : October 17, 2013\r\ntitle : CSS Animations With Javascript\r\nurl   : /blog/css-animations-with-javascript\r\n\r\nAnimations should be done with CSS instead of Javascript when possible for a couple reasons. Firstly, CSS animations often use the GPU. Secondly, style definitions naturally belong in the CSS stylesheet and not in Javascript. So why do people use Javascript to animate web elements? Well, Javascript allows our websites to respond to browser events in ways that CSS doesn't. This means that we can't just do away with Javascript entirely.\r\n\r\n### Meeting In The Middle\r\n\r\nTo apply animations first define classes in CSS for the animations and then add/remove those classes from elements using Javascript. Here's the obligatory jQuery example:\r\n\r\n    .foo {\r\n        color: black;\r\n        transition: color 0.5s;\r\n    }\r\n    \r\n    .animate-red {\r\n        color: red;\r\n    }\r\n\r\n<!-- ... -->\r\n\r\n    $('.foo').click(function(e) {\r\n        e.preventDefault();\r\n        $(this).toggleClass('animate-red');\r\n    });\r\n\r\nPretty simple, right? Clicking on the `.foo` element will cause its color to transition between black and red. I imagine that not everything can be animated this way though, so keep an open mind.\r\n\r\n**Note:** It is also possible to move `transition: color 0.5s;` over to the `.animate-red` definition, but that would cause the animation to only run when the class is added. The transition back to black would then be instant when the class is removed.
4	template	post
4	date	October 17, 2013
4	title	CSS Animations With Javascript
4	content	<p>Animations should be done with CSS instead of Javascript when possible for a couple reasons. Firstly, CSS animations often use the GPU. Secondly, style definitions naturally belong in the CSS stylesheet and not in Javascript. So why do people use Javascript to animate web elements? Well, Javascript allows our websites to respond to browser events in ways that CSS doesn't. This means that we can't just do away with Javascript entirely.</p>\n\n<h3>Meeting In The Middle</h3>\n\n<p>To apply animations first define classes in CSS for the animations and then add/remove those classes from elements using Javascript. Here's the obligatory jQuery example:</p>\n\n<pre>.foo {\n    color: black;\n    transition: color 0.5s;\n}\n\n.animate-red {\n    color: red;\n}</pre>\n\n<!-- ... -->\n\n<pre>$('.foo').click(function(e) {\n    e.preventDefault();\n    $(this).toggleClass('animate-red');\n});</pre>\n\n<p>Pretty simple, right? Clicking on the <code>.foo</code> element will cause its color to transition between black and red. I imagine that not everything can be animated this way though, so keep an open mind.</p>\n\n<p><strong>Note:</strong> It is also possible to move <code>transition: color 0.5s;</code> over to the <code>.animate-red</code> definition, but that would cause the animation to only run when the class is added. The transition back to black would then be instant when the class is removed.</p>\n
2		
2	markdown	design : blog\r\ntitle : Blog\r\nurl   : /blog\r\n\r\n## Blog Archive
2	template	post
2	design	blog
2	title	Blog
2	content	<h2>Blog Archive</h2>\n
8	markdown	design : simple\r\ntitle : Résumé\r\nurl : /resume\r\n\r\n<p class="centered">\r\n <span>Phone: <a class="tel" href="tel:+1-810-728-1572">+1 (810) 728-1572</a></span>\r\n <span>E-Mail: <a href="mailto:evantbyrne@gmail.com">evantbyrne@gmail.com</a></span>\r\n <span>Portfolio: <a href="http://evanbyrne.com">evanbyrne.com</a></span>\r\n</p>\r\n\r\n<h2 class="no-print">Résumé</h2>\r\n\r\nExcellent software developer with a decade of experience building websites and other custom software.\r\n\r\n### Work Experience\r\n\r\n* **2012 - Present:** Software Developer at [Grid, LLC](http://workwithgrid.com/).\r\n* **2006 - Present:** Freelance Website Developer.\r\n* **2010 - 2012:** Software Developer at [Technology Operations](https://ihelp.cmich.edu/).\r\n\r\n### Education\r\n\r\n* **2010 - Present:** Information Technology at [Central Michigan University](http://cmich.edu/).\r\n* **2007 - 2010:** Computer Networking and Engineering at [Lapeer County Education & Technology Center](http://www.lcisd.k12.mi.us/).\r\n\r\n### Languages\r\n\r\nCSS, Go, HTML, Java, JavaScript, PHP, Python.\r\n\r\n### Frameworks & Content Management Systems\r\n\r\nDjango, jQuery, Laravel, Spring Framework, WordPress.\r\n\r\n### Databases\r\n\r\nDB2, MySQL, PostgreSQL, SQLite.\r\n\r\n### Miscellaneous Achievements\r\n\r\n* **2009, 2010:** Two-time SkillsUSA Internetworking States Level Gold Medalist.\r\n* **2008:** CompTIA A+ Certified IT Technician.
8	template	post
8	design	simple
8	title	Résumé
8	content	<p class="centered">\n <span>Phone: <a class="tel" href="tel:+1-810-728-1572">+1 (810) 728-1572</a></span>\n <span>E-Mail: <a href="mailto:evantbyrne@gmail.com">evantbyrne@gmail.com</a></span>\n <span>Portfolio: <a href="http://evanbyrne.com">evanbyrne.com</a></span>\n</p>\n\n<h2 class="no-print">Résumé</h2>\n\n<p>Excellent software developer with a decade of experience building websites and other custom software.</p>\n\n<h3>Work Experience</h3>\n\n<ul>\n<li><strong>2012 - Present:</strong> Software Developer at <a href="http://workwithgrid.com/">Grid, LLC</a>.</li>\n<li><strong>2006 - Present:</strong> Freelance Website Developer.</li>\n<li><strong>2010 - 2012:</strong> Software Developer at <a href="https://ihelp.cmich.edu/">Technology Operations</a>.</li>\n</ul>\n\n<h3>Education</h3>\n\n<ul>\n<li><strong>2010 - Present:</strong> Information Technology at <a href="http://cmich.edu/">Central Michigan University</a>.</li>\n<li><strong>2007 - 2010:</strong> Computer Networking and Engineering at <a href="http://www.lcisd.k12.mi.us/">Lapeer County Education &amp; Technology Center</a>.</li>\n</ul>\n\n<h3>Languages</h3>\n\n<p>CSS, Go, HTML, Java, JavaScript, PHP, Python.</p>\n\n<h3>Frameworks &amp; Content Management Systems</h3>\n\n<p>Django, jQuery, Laravel, Spring Framework, WordPress.</p>\n\n<h3>Databases</h3>\n\n<p>DB2, MySQL, PostgreSQL, SQLite.</p>\n\n<h3>Miscellaneous Achievements</h3>\n\n<ul>\n<li><strong>2009, 2010:</strong> Two-time SkillsUSA Internetworking States Level Gold Medalist.</li>\n<li><strong>2008:</strong> CompTIA A+ Certified IT Technician.</li>\n</ul>\n
11		
11	markdown	date : April 29, 2014\r\ndescription : A brief analysis of the interpersonal relationship between Anakin and Luke Skywalker from a communicative perspective.\r\ntitle : Father-Son Time With Darth Vader\r\nurl : /preview/father-son-time-with-darth-vader\r\n\r\n*This paper was originally published on April 29 as a part of a school project.*\r\n\r\n### Abstract\r\n\r\nThis paper will provide a brief analysis of the interpersonal relationship between the fictional Star Wars characters Anakin and Luke Skywalker in episodes IV, V, and VI. Their relationship will be evaluated from a communicative perspective through the application of various theories. This paper will assess their relationship chronologically.\r\n\r\n### Brief History\r\n\r\nStar Wars Episode IV starts from the perspective of a young Luke Skywalker, whom has grown up on the dusty planet of Tatooine. It is here that he grew up in relative safety with his father’s step-brother Owen Lars. Luke had been separated from his father Anakin who was perceived as a danger to Luke, because Anakin had assumed the role of Darth Vader and second in command of the Galactic Empire. After having multiple run-ins with the Galactic Empire, Luke decides to join the rebel army. Through Luke’s efforts to overthrow the Galactic Empire, he has multiple encounters with Anakin, which will be analyzed throughout the remainder of this paper.\r\n\r\n### Early Encounters\r\n\r\nLuke and Anakin never communicate in person throughout the entirety of Episode IV. However, after Luke and the other rebels trash Anakin’s “Death Star” vacation home / giant gun, Anakin becomes angry and obsessed with searching out and destroying the people responsible. At this point, neither Anakin nor Luke appear to realize that they are related to each other, so their actions towards each other are shaped by their respective group memberships. One of the many things that Social Identity Theory tells us is that people generally assume various things about each other based on group membership (Turner, Oakes; 1986). Knowing this helps us understand the dynamic between Anakin and Luke in Episode IV. They both know very little about each other, so they have to rely on generalizations to predict each others’ behavior.\r\n\r\nAfter much action in Episode V, Luke and Anakin finally meet each other in person at Cloud City. By this time, Anakin has realized that he is Luke’s father, but Luke does not yet know and still thinks that Darth Vader killed his father. So, Luke is angry with Anakin. However, Anakin is actually trying to abduct Luke, so that he can coax Luke into having a personal relationship with him. Anakin’s trap fails and they immediately get into a light saber duel with each other. Social Penetration Theory tells us that, as our relationships develop, our communications gradually become more intimate. This also means that, generally, we avoid disclosing highly intimate information right away (Baack et al., 2000). So, failing to trap Luke causes a few problems. First of all, Luke gets his arm sliced off in the duel. That kind of stinks. Secondly, it forces Anakin to try and rush the process of convincing Luke to join the Galactic Empire. Luke and Anakin have the following exchange: Anakin says, “Obi-Wan never told you what happened to your father.” Luke responds, “He told me enough! He told me you killed him.” Finally, Anakin replies with “No. I am your father.” Due to Anakin’s poorly implemented trap, he felt it necessary to bypass the standard social protocol defined by Social Penetration Theory and disclose his true identity.\r\n\r\nLuke then - acting out of shock and dismay - plunges himself off the platform he is hanging onto, somehow miraculously survives, and then gets rescued by a guy with terminal hypertrichosis and his other pals in the millennium falcon. Clearly, Anakin shocked Luke by revealing his identity. If only Anakin had known about Expectancy Violations Theory, then he might have chosen a better time and place to reveal such an earth-shattering secrete to Luke. See, Expectancy Violations Theory tells us that people respond to expectancy violations in accordance to how positive they perceive said violations to be (Bevan et al., 2014). If a violation of a person’s expectancies is interpreted as positive by said person, then that violation is seen as a good thing and can improve the relationship. However, when an expectancy violation is perceived as bad, then it can greatly harm the relationship and the people involved. Often, the results of a negative expectancy violation can be devastating. For example, having your son leap to his almost certain death.\r\n\r\n### Resolution\r\n\r\nLuckily for George Lucas’ bank account, Anakin and Luke are both highly motivated to convert each other to their respective social groups, so the story continues. After much more telepathic communication, blaster shooting, and some sister drama; Luke surrenders himself to Anakin on the forrest moon Endor. Up until this point, the conflict management style that Anakin and Luke have both displayed could only realistically be interpreted as competitive fighting. In this final encounter, Anakin and Luke both continue to stand their ground on attempting to convince each other to convert. It seems as though that Anakin does not want to actually harm Luke, but Anakin also has to maintain his face in front of the Sith Lord. So, even though Luke initially refuses to fight Anakin, they end up in yet another violent conflict. Again, only after someone loses an arm, they stop fighting. Upset with Luke’s lack of motivation to murder his father and join the dark side, the Sith Lord begins to electrocute him. Eventually, the sight of his son dying a horribly painful death motivates Anakin to ditch the bad-boy act to save Luke. The Sith Lord dies, Luke forgives Anakin, and everyone is happy. And then Anakin dies.\r\n\r\n### Conclusion\r\n\r\nIn many ways, Star Wars episodes IV through VI can been seen as a complicated father- son love story. When analyzed from a communicative perspective, it becomes clear that Anakin and Luke could have benefitted greatly from some communicative insight. If Anakin had taken that elective interpersonal communications class instead of rushing through his training, then perhaps less people would have lost their arms.\r\n\r\n### References\r\n\r\n* Baack, Donald; Fogliasso, Christine; & Harris, James (2000). The Personal Impact of Ethical Decisions: A Social Penetration Theory. *Journal of Business Ethics*, 21, 39-49.\r\n* Bevan, Jennifer., Ang, Pei-Chern, & Fearns, James (2014). Being unfriended on Facebook: An application of Expectancy Violation Theory. *Computers in Human Behavior*, 33, 171-178.\r\n* Turner, John & Oakes, Penny (1986). The significance of the social identity concept for social psychology with reference to individualism, interactionism and social influence. *British Journal of Social Psychology*, 25 (3): 237–252.
11	template	post
11	date	April 29, 2014
11	description	A brief analysis of the interpersonal relationship between Anakin and Luke Skywalker from a communicative perspective.
11	title	Father-Son Time With Darth Vader
11	content	<p><em>This paper was originally published on April 29 as a part of a school project.</em></p>\n\n<h3>Abstract</h3>\n\n<p>This paper will provide a brief analysis of the interpersonal relationship between the fictional Star Wars characters Anakin and Luke Skywalker in episodes IV, V, and VI. Their relationship will be evaluated from a communicative perspective through the application of various theories. This paper will assess their relationship chronologically.</p>\n\n<h3>Brief History</h3>\n\n<p>Star Wars Episode IV starts from the perspective of a young Luke Skywalker, whom has grown up on the dusty planet of Tatooine. It is here that he grew up in relative safety with his father’s step-brother Owen Lars. Luke had been separated from his father Anakin who was perceived as a danger to Luke, because Anakin had assumed the role of Darth Vader and second in command of the Galactic Empire. After having multiple run-ins with the Galactic Empire, Luke decides to join the rebel army. Through Luke’s efforts to overthrow the Galactic Empire, he has multiple encounters with Anakin, which will be analyzed throughout the remainder of this paper.</p>\n\n<h3>Early Encounters</h3>\n\n<p>Luke and Anakin never communicate in person throughout the entirety of Episode IV. However, after Luke and the other rebels trash Anakin’s “Death Star” vacation home / giant gun, Anakin becomes angry and obsessed with searching out and destroying the people responsible. At this point, neither Anakin nor Luke appear to realize that they are related to each other, so their actions towards each other are shaped by their respective group memberships. One of the many things that Social Identity Theory tells us is that people generally assume various things about each other based on group membership (Turner, Oakes; 1986). Knowing this helps us understand the dynamic between Anakin and Luke in Episode IV. They both know very little about each other, so they have to rely on generalizations to predict each others’ behavior.</p>\n\n<p>After much action in Episode V, Luke and Anakin finally meet each other in person at Cloud City. By this time, Anakin has realized that he is Luke’s father, but Luke does not yet know and still thinks that Darth Vader killed his father. So, Luke is angry with Anakin. However, Anakin is actually trying to abduct Luke, so that he can coax Luke into having a personal relationship with him. Anakin’s trap fails and they immediately get into a light saber duel with each other. Social Penetration Theory tells us that, as our relationships develop, our communications gradually become more intimate. This also means that, generally, we avoid disclosing highly intimate information right away (Baack et al., 2000). So, failing to trap Luke causes a few problems. First of all, Luke gets his arm sliced off in the duel. That kind of stinks. Secondly, it forces Anakin to try and rush the process of convincing Luke to join the Galactic Empire. Luke and Anakin have the following exchange: Anakin says, “Obi-Wan never told you what happened to your father.” Luke responds, “He told me enough! He told me you killed him.” Finally, Anakin replies with “No. I am your father.” Due to Anakin’s poorly implemented trap, he felt it necessary to bypass the standard social protocol defined by Social Penetration Theory and disclose his true identity.</p>\n\n<p>Luke then - acting out of shock and dismay - plunges himself off the platform he is hanging onto, somehow miraculously survives, and then gets rescued by a guy with terminal hypertrichosis and his other pals in the millennium falcon. Clearly, Anakin shocked Luke by revealing his identity. If only Anakin had known about Expectancy Violations Theory, then he might have chosen a better time and place to reveal such an earth-shattering secrete to Luke. See, Expectancy Violations Theory tells us that people respond to expectancy violations in accordance to how positive they perceive said violations to be (Bevan et al., 2014). If a violation of a person’s expectancies is interpreted as positive by said person, then that violation is seen as a good thing and can improve the relationship. However, when an expectancy violation is perceived as bad, then it can greatly harm the relationship and the people involved. Often, the results of a negative expectancy violation can be devastating. For example, having your son leap to his almost certain death.</p>\n\n<h3>Resolution</h3>\n\n<p>Luckily for George Lucas’ bank account, Anakin and Luke are both highly motivated to convert each other to their respective social groups, so the story continues. After much more telepathic communication, blaster shooting, and some sister drama; Luke surrenders himself to Anakin on the forrest moon Endor. Up until this point, the conflict management style that Anakin and Luke have both displayed could only realistically be interpreted as competitive fighting. In this final encounter, Anakin and Luke both continue to stand their ground on attempting to convince each other to convert. It seems as though that Anakin does not want to actually harm Luke, but Anakin also has to maintain his face in front of the Sith Lord. So, even though Luke initially refuses to fight Anakin, they end up in yet another violent conflict. Again, only after someone loses an arm, they stop fighting. Upset with Luke’s lack of motivation to murder his father and join the dark side, the Sith Lord begins to electrocute him. Eventually, the sight of his son dying a horribly painful death motivates Anakin to ditch the bad-boy act to save Luke. The Sith Lord dies, Luke forgives Anakin, and everyone is happy. And then Anakin dies.</p>\n\n<h3>Conclusion</h3>\n\n<p>In many ways, Star Wars episodes IV through VI can been seen as a complicated father- son love story. When analyzed from a communicative perspective, it becomes clear that Anakin and Luke could have benefitted greatly from some communicative insight. If Anakin had taken that elective interpersonal communications class instead of rushing through his training, then perhaps less people would have lost their arms.</p>\n\n<h3>References</h3>\n\n<ul>\n<li>Baack, Donald; Fogliasso, Christine; &amp; Harris, James (2000). The Personal Impact of Ethical Decisions: A Social Penetration Theory. <em>Journal of Business Ethics</em>, 21, 39-49.</li>\n<li>Bevan, Jennifer., Ang, Pei-Chern, &amp; Fearns, James (2014). Being unfriended on Facebook: An application of Expectancy Violation Theory. <em>Computers in Human Behavior</em>, 33, 171-178.</li>\n<li>Turner, John &amp; Oakes, Penny (1986). The significance of the social identity concept for social psychology with reference to individualism, interactionism and social influence. <em>British Journal of Social Psychology</em>, 25 (3): 237–252.</li>\n</ul>\n
9		
9	markdown	date  : April 13, 2014\r\ntitle : Spring Cleaning\r\nurl   : /blog/spring-cleaning\r\n\r\nToday I launched the redesign of this website. In the spirit of the season, everything has been tidied up. Here are the highlights of the new design:\r\n\r\n### Content First\r\n\r\nThe new design is completely focused on the content. The only image assets used in the design are the picture of me at the top of the page and a small favicon. In addition to reducing distractions, the extremely minimalist design is also predictably efficient. There is almost no fluff in the HTML and CSS, which makes the site pretty quick.\r\n\r\n### Built With Go\r\n\r\nAs many have likely noticed, I have been particularly interesting in the Go programming language lately. After getting my feet wet with some small experimental applications, I decided to adopt Go for this website. Overall, the development and deployment process has been relatively painless. The source code for this site is [available on Github](https://github.com/evantbyrne/evanbyrne-go).\r\n\r\n### Markdown\r\n\r\nThe content for every page of this site is written in [Markdown](https://daringfireball.net/projects/markdown/) syntax and transformed into HTML with the wonderful [Blackfriday](https://github.com/russross/blackfriday) library. Data can be defined at the top of any document as a `key:value` pair. For example, here is the topmost part of the Markdown for this page:\r\n\r\n    date  : April 13, 2014\r\n    title : Spring Cleaning\r\n    url   : /blog/spring-cleaning\r\n    \r\n    Today I launched the redesign of this website. In the spirit of the season, everything has been tidied up. Here are the highlights of the new design:\r\n    \r\n    ### Content First\r\n    \r\n    The new design is completely focused on the content. The only image assets used in the design are the picture...\r\n\r\nPreviously, to edit content on this site I had to write HTML. Using Markdown is significantly easier and I can still use HTML if needed.\r\n\r\n### Final Words\r\n\r\nThe new design is extremely plain, so it may not appeal to everyone. In fact, I am sure many will find it boring. However, I am a software developer, so I prefer to have my personal site focus on utility rather than striking visuals.\r\n\r\nAs has always been the case with my personal websites, this will continue to be a work in progress.
9	template	post
9	date	April 13, 2014
9	title	Spring Cleaning
9	content	<p>Today I launched the redesign of this website. In the spirit of the season, everything has been tidied up. Here are the highlights of the new design:</p>\n\n<h3>Content First</h3>\n\n<p>The new design is completely focused on the content. The only image assets used in the design are the picture of me at the top of the page and a small favicon. In addition to reducing distractions, the extremely minimalist design is also predictably efficient. There is almost no fluff in the HTML and CSS, which makes the site pretty quick.</p>\n\n<h3>Built With Go</h3>\n\n<p>As many have likely noticed, I have been particularly interesting in the Go programming language lately. After getting my feet wet with some small experimental applications, I decided to adopt Go for this website. Overall, the development and deployment process has been relatively painless. The source code for this site is <a href="https://github.com/evantbyrne/evanbyrne-go">available on Github</a>.</p>\n\n<h3>Markdown</h3>\n\n<p>The content for every page of this site is written in <a href="https://daringfireball.net/projects/markdown/">Markdown</a> syntax and transformed into HTML with the wonderful <a href="https://github.com/russross/blackfriday">Blackfriday</a> library. Data can be defined at the top of any document as a <code>key:value</code> pair. For example, here is the topmost part of the Markdown for this page:</p>\n\n<pre>date  : April 13, 2014\ntitle : Spring Cleaning\nurl   : /blog/spring-cleaning\n\nToday I launched the redesign of this website. In the spirit of the season, everything has been tidied up. Here are the highlights of the new design:\n\n### Content First\n\nThe new design is completely focused on the content. The only image assets used in the design are the picture...</pre>\n\n<p>Previously, to edit content on this site I had to write HTML. Using Markdown is significantly easier and I can still use HTML if needed.</p>\n\n<h3>Final Words</h3>\n\n<p>The new design is extremely plain, so it may not appeal to everyone. In fact, I am sure many will find it boring. However, I am a software developer, so I prefer to have my personal site focus on utility rather than striking visuals.</p>\n\n<p>As has always been the case with my personal websites, this will continue to be a work in progress.</p>\n
7		
7	markdown	date  : March 16, 2014\r\ntitle : Setting Up A Production Go Web Server On Ubuntu With Nginx\r\nurl   : /blog/go-production-server-ubuntu-nginx\r\n\r\n### Overview\r\n\r\nGuide to setting up a simple production environment for Go 1.2 web applications on Ubuntu 12.04 with Nginx as a reverse proxy. This tutorial assumes that you have a basic understanding of the Go programming language and know how to use the command line.\r\n\r\n### Install Go\r\n\r\nFirst, install dependencies for [GVM](https://github.com/moovweb/gvm).\r\n\r\n    sudo apt-get update\r\n    sudo apt-get install curl git mercurial make binutils bison gcc\r\n\r\nNext, install GVM.\r\n\r\n    bash < <(curl -s https://raw.github.com/moovweb/gvm/master/binscripts/gvm-installer)\r\n    source $HOME/.gvm/scripts/gvm\r\n\r\nInstall Go version 1.2 via GVM.\r\n\r\n    gvm install go1.2\r\n    gvm use go1.2 --default\r\n\r\nAppend the following to `~/.bashrc`:\r\n\r\n    export GOPATH=$HOME/go\r\n    export GOBIN=$GOPATH/bin\r\n    export GOMAXPROCS=2\r\n\r\nReload .bashrc with the `source ~/.bashrc` command.\r\n\r\n### Basic Web App\r\n\r\nRun the `mkdir ~/go/src/hello` command to create a directory for your app. Create `~/go/src/hello/hello.go` and run with `go run ~/go/src/hello/hello.go`.\r\n\r\n    package main\r\n    \r\n    import (\r\n        "fmt"\r\n        "net/http"\r\n        "time"\r\n    )\r\n    \r\n    func handler(response http.ResponseWriter, request *http.Request) {\r\n        time.Sleep(time.Second * 5)\r\n        fmt.Fprintf(response, "Hello, %s!", request.URL.Path[1:])\r\n    }\r\n    \r\n    func main() {\r\n        http.HandleFunc("/", handler)\r\n        http.ListenAndServe(":8001", nil)\r\n    }\r\n\r\nEach request will have a five second delay, but requests should be handled in parallel. Try accessing URLs like these:\r\n\r\n    http://myserverip:8001/world\r\n    http://myserverip:8001/Evan\r\n    http://myserverip:8001/Bob\r\n\r\nIf requests aren't being handled in parallel, then you most likely didn't set `GOMAXPROCS` to a value of `2` or higher. Also note that Chrome may load two URLs synchronously if they point to the exact same location.\r\n\r\n### Create Service\r\n\r\nFirst, compile the hello program with the `go install ~/go/src/hello/hello.go` command. The binary will be located at `~/go/bin/hello`.\r\n\r\nNext, create a file at `/etc/init.d/hello.sh` for your startup script.\r\n\r\n    #!/bin/bash\r\n    \r\n    case $1 in\r\n        start)\r\n            echo "Starting hello web app."\r\n            /root/go/bin/hello &\r\n            ;;\r\n        stop)\r\n            echo "Stopping hello web app."\r\n            sudo kill $(sudo lsof -t -i:8001)\r\n            ;;\r\n        *)\r\n            echo "Hello web app service."\r\n            echo $"Usage $0 {start|stop}"\r\n            exit 1\r\n    esac\r\n    exit 0\r\n\r\nNext, give it the correct permissions by running `sudo chmod 755 /etc/init.d/hello.sh`. The service can now be started and stopped by running `sudo /etc/init.d/hello.sh start` and `sudo /etc/init.d/hello.sh stop` respectively.\r\n\r\nLastly, you may also have the hello service run on system boot by running `sudo update-rc.d hello.sh defaults`. For more information on update-rc.d, please see [the manual page](http://manpages.ubuntu.com/manpages/natty/man8/update-rc.d.8.html).\r\n\r\n### Setup Nginx\r\n\r\nFirst, install Nginx.\r\n\r\n    sudo apt-get install nginx\r\n\r\nNext, configure Nginx by editing `/etc/nginx/sites-enabled/default`. Modify `location /` to look like this:\r\n\r\n    location / {\r\n        proxy_set_header X-Real-IP $remote_addr;\r\n        proxy_set_header X-Forwarded-For $remote_addr;\r\n        proxy_set_header Host $host;\r\n        proxy_pass http://127.0.0.1:8001;\r\n    }\r\n\r\nIt's also a good idea to comment out any other locations. E.g., `location /doc/`.\r\n\r\nLastly, restart Nginx.\r\n\r\n    sudo service nginx restart\r\n\r\nAll requests to port 80 (the default HTTP port) will now be forwarded to the Go server listening on port 8001. That's all there is to it! As long as they are running on different ports and Nginx is properly configured, then additional Go web apps can be run as well.
7	template	post
7	date	March 16, 2014
7	title	Setting Up A Production Go Web Server On Ubuntu With Nginx
7	content	<h3>Overview</h3>\n\n<p>Guide to setting up a simple production environment for Go 1.2 web applications on Ubuntu 12.04 with Nginx as a reverse proxy. This tutorial assumes that you have a basic understanding of the Go programming language and know how to use the command line.</p>\n\n<h3>Install Go</h3>\n\n<p>First, install dependencies for <a href="https://github.com/moovweb/gvm">GVM</a>.</p>\n\n<pre>sudo apt-get update\nsudo apt-get install curl git mercurial make binutils bison gcc</pre>\n\n<p>Next, install GVM.</p>\n\n<pre>bash &lt; &lt;(curl -s https://raw.github.com/moovweb/gvm/master/binscripts/gvm-installer)\nsource $HOME/.gvm/scripts/gvm</pre>\n\n<p>Install Go version 1.2 via GVM.</p>\n\n<pre>gvm install go1.2\ngvm use go1.2 --default</pre>\n\n<p>Append the following to <code>~/.bashrc</code>:</p>\n\n<pre>export GOPATH=$HOME/go\nexport GOBIN=$GOPATH/bin\nexport GOMAXPROCS=2</pre>\n\n<p>Reload .bashrc with the <code>source ~/.bashrc</code> command.</p>\n\n<h3>Basic Web App</h3>\n\n<p>Run the <code>mkdir ~/go/src/hello</code> command to create a directory for your app. Create <code>~/go/src/hello/hello.go</code> and run with <code>go run ~/go/src/hello/hello.go</code>.</p>\n\n<pre>package main\n\nimport (\n    &quot;fmt&quot;\n    &quot;net/http&quot;\n    &quot;time&quot;\n)\n\nfunc handler(response http.ResponseWriter, request *http.Request) {\n    time.Sleep(time.Second * 5)\n    fmt.Fprintf(response, &quot;Hello, %s!&quot;, request.URL.Path[1:])\n}\n\nfunc main() {\n    http.HandleFunc(&quot;/&quot;, handler)\n    http.ListenAndServe(&quot;:8001&quot;, nil)\n}</pre>\n\n<p>Each request will have a five second delay, but requests should be handled in parallel. Try accessing URLs like these:</p>\n\n<pre>http://myserverip:8001/world\nhttp://myserverip:8001/Evan\nhttp://myserverip:8001/Bob</pre>\n\n<p>If requests aren't being handled in parallel, then you most likely didn't set <code>GOMAXPROCS</code> to a value of <code>2</code> or higher. Also note that Chrome may load two URLs synchronously if they point to the exact same location.</p>\n\n<h3>Create Service</h3>\n\n<p>First, compile the hello program with the <code>go install ~/go/src/hello/hello.go</code> command. The binary will be located at <code>~/go/bin/hello</code>.</p>\n\n<p>Next, create a file at <code>/etc/init.d/hello.sh</code> for your startup script.</p>\n\n<pre>#!/bin/bash\n\ncase $1 in\n    start)\n        echo &quot;Starting hello web app.&quot;\n        /root/go/bin/hello &amp;\n        ;;\n    stop)\n        echo &quot;Stopping hello web app.&quot;\n        sudo kill $(sudo lsof -t -i:8001)\n        ;;\n    *)\n        echo &quot;Hello web app service.&quot;\n        echo $&quot;Usage $0 {start|stop}&quot;\n        exit 1\nesac\nexit 0</pre>\n\n<p>Next, give it the correct permissions by running <code>sudo chmod 755 /etc/init.d/hello.sh</code>. The service can now be started and stopped by running <code>sudo /etc/init.d/hello.sh start</code> and <code>sudo /etc/init.d/hello.sh stop</code> respectively.</p>\n\n<p>Lastly, you may also have the hello service run on system boot by running <code>sudo update-rc.d hello.sh defaults</code>. For more information on update-rc.d, please see <a href="http://manpages.ubuntu.com/manpages/natty/man8/update-rc.d.8.html">the manual page</a>.</p>\n\n<h3>Setup Nginx</h3>\n\n<p>First, install Nginx.</p>\n\n<pre>sudo apt-get install nginx</pre>\n\n<p>Next, configure Nginx by editing <code>/etc/nginx/sites-enabled/default</code>. Modify <code>location /</code> to look like this:</p>\n\n<pre>location / {\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Forwarded-For $remote_addr;\n    proxy_set_header Host $host;\n    proxy_pass http://127.0.0.1:8001;\n}</pre>\n\n<p>It's also a good idea to comment out any other locations. E.g., <code>location /doc/</code>.</p>\n\n<p>Lastly, restart Nginx.</p>\n\n<pre>sudo service nginx restart</pre>\n\n<p>All requests to port 80 (the default HTTP port) will now be forwarded to the Go server listening on port 8001. That's all there is to it! As long as they are running on different ports and Nginx is properly configured, then additional Go web apps can be run as well.</p>\n
10		
10	markdown	date : April 29, 2014\r\ndescription : An introduction into the DB2 SQL query tuning process.\r\ntitle : Experimenting With SQL Tuning In DB2\r\nurl : /blog/sql-tuning-db2\r\n\r\n*This paper was originally published on April 24 as a part of a school project. Also, these tests were run on DB2 Express-C edition installed on a Ubuntu VM, so your milage may vary.*\r\n\r\n### Abstract\r\n\r\nThis paper provides a basic introduction into the SQL query tuning process in regards to the DB2 DBMS (Database Management System). Additionally, this paper will explore a few different SQL query optimization techniques while also analyzing the effectiveness of each method. The most effective method of decreasing SQL query cost appears to be column indexing.\r\n\r\n### The DB2 SQL Tuning Toolset\r\n\r\nDB2 provides a number of tools which are designed to assist application developers and database administrators in the optimization of databases. This paper will introduce and utilize two tools which were designed to help tune SQL queries. The first of these tools is is the RUNSTATS SQL query. When used, the RUNSTATS command provides DB2 with statistical information, which can then be used by the DBMS and various DB2 utilities ([Pay, 2002](#ref-pay)). The RUNSTATS query has a lot of options, but this paper will use the following RUNSTATS query format:\r\n\r\n    runstats on table <table-name> on all columns;\r\n\r\nThe above SQL query tells DB2 to gather statistical information on all columns of the specified table.\r\n\r\nNote: The *&lt;description&gt;* formatting tag convention is used throughout this paper to signify required command parameters. When using the provided example commands, these tags should be replaced with the appropriate data.\r\n\r\nThe second tool that this study used was db2expln. The db2expln command line utility was designed to use statistics provided by RUNSTATS to provide detailed information on the data access plan that DB2 uses for various database queries ([db2expln](#ref-db2expln)). There is also a GUI version of the db2expln called Visual Explain, but this paper will only explore the use of the command line version. As with the RUNSTATS query, the db2expln command has many options, but this study only used three. The format of the db2expln command used in this study was as follows:\r\n\r\n    db2expln -database <database-name> -statement "<sql-query>" -terminal\r\n\r\nRunning a command like the above will output various information about the provided SQL query in the terminal. This information includes estimated cost of the query, estimated cardinality of the query, and the data access path used by DB2. This paper will primarily use the estimated cost to determine the efficiency of various SQL queries in relation to other queries.\r\n\r\n### Experiment Structure\r\n\r\nBoth the RUNSTATS query and the db2expln command require an actual DB2 database with data in it to be useful. This study of various SQL queries used a database with tables of a structure similar to the following (within a schema named bank):\r\n\r\n    create table bank.product ( \r\n        product_cd varchar(10) not null, \r\n        name varchar(50) not null, \r\n        constraint pk_product primary key (product_cd) \r\n    ); \r\n    create table bank.customer ( \r\n        cust_id integer not null generated always as identity(start with 1,  increment by 1, no cache), \r\n        fed_id varchar(12) not null, \r\n        cust_type_cd char(1) not null check(cust_type_cd IN ('I', 'B')),  address varchar(30), \r\n        city varchar(20), \r\n        state varchar(20), \r\n        postal_code varchar(10), \r\n        constraint pk_customer primary key (cust_id) \r\n    ); \r\n    create table bank.account ( \r\n        account_id integer not null generated always as identity (  start with 1, increment by 1, no cache), \r\n        avail_balance decimal(10,2), \r\n        product_cd varchar(10) not null, \r\n        status char(6) check (status IN ('ACTIVE','CLOSED','FROZEN')),  constraint fk_product_cd foreign key (product_cd) \r\n        references bank.product (product_cd),  constraint pk_account primary key (account_id) \r\n    ); \r\n    create table bank.acct_tran ( \r\n        txn_id integer not null generated always as identity (start with 1,  increment by 1, no cache), \r\n        account_id integer not null,  amount decimal(10,2) not null,\r\n        constraint fk_t_account_id foreign key (account_id)  references bank.account (account_id), \r\n        constraint pk_transaction primary key (txn_id) \r\n    );\r\n\r\nThe actual database was larger and more complex than the above set of tables, but the given tables will suffice for the purposes of this paper. All tables were populated with semi-randomly generated data using an online data generation tool. After each alteration to the database structure and/or dataset was imported, then the RUNSTATS query was run for all affected tables. Finally, the db2expln command was then used to find the estimated cost associated with various SQL queries.\r\n\r\n### Simple Select Queries\r\n\r\nThe first type of queries tested were basic select queries with a single ‘where’ clause. For example, here is the first tested query:\r\n\r\n    select * from bank.account where status = 'ACTIVE';\r\n\r\nAccording to db2expln, the above query had a cost of 25.807417. At that point, the status column on the account table had not been indexed. Next, as shown below, an index was created for the status column and RUNSTATS was run again.\r\n\r\n    create index index__account_status on bank.account (status); \r\n    runstats on table bank.account on all columns;\r\n\r\nAfter the creation of the index, db2expln reported a cost of 14.259101 for the exact same select query. Adding the index almost doubled the estimated speed of the query.\r\n\r\nThe next step was to see what effect that a ‘limit’ clause would have on a select query. The following query was analyzed with db2expln:\r\n\r\n    select * from bank.account where status = 'ACTIVE' limit 1;\r\n\r\nThis query had a reported cost of 12.870489, which was slightly lower than the query without a ‘limit’ clause. It is worth noting that the account table had only about 100 rows of data in it at the time of these tests, so it is possible that the gap in cost between these queries could increase significantly with a larger dataset. However, even with a small dataset, it is very clear that properly configured indexes can greatly speed up select queries.\r\n\r\nThe last select query tested for this group also accessed the account table, but the ‘where’ clause did a comparison on the primary key column instead of the indexed status column. Below is the query:\r\n\r\n    select * from bank.account where account_id = 1;\r\n\r\nThe db2expln utility reported that the above query had an estimated cost of 12.870740, which is extremely close to the estimated cost of the previous query. This indicates that selecting by a primary key and selecting a single row by an indexed column have roughly the same cost.\r\n\r\n### Count Queries\r\n\r\nAfter testing basic select queries, I was eager to see how quick count queries were in comparison. According to the db2expln utility, all of the following count queries had an estimated cost of only 0.048595 and returned the exact same results:\r\n\r\n    select count(*) from bank.account where status = 'ACTIVE';\r\n\r\n<!-- ... -->\r\n\r\n    select count(1) from bank.account where status = 'ACTIVE';\r\n\r\n<!-- ... -->\r\n\r\n    select count(*) from (select * from bank.account where status = 'ACTIVE');\r\n\r\nIn comparison to the previously measured select queries, the above count queries are all extremely quick. This means two things. First of all, unless used excessively, count queries will not be a bottleneck for the DBMS. Secondly, it shows that DB2 appears to handle syntactically different but semantically identical count queries equally efficiently.\r\n\r\n### Cross Operations And Join Queries\r\n\r\nUp until this point, all of the discussed queries have been relatively simple, so it was no surprise that DB2 handled the semantically identical count queries all the same. It was time to see how DB2 would handle different queries that touched multiple tables. To start things off, the following cross operation was run through db2expln:\r\n\r\n    select * from bank.product, bank.account;\r\n\r\n\r\nThe above query had a whopping estimated cost of 52.059380. This is no surprise though, because it returned a result set with a cardinality of 840. Clearly, indiscriminately using cross query operations can be extremely expensive.\r\n\r\nNext, I looked at three different versions of a basic join query on the same two tables. The three queries looked like this:\r\n\r\n    select * from bank.product p, bank.account a \r\n        where p.product_cd = a.product_cd;\r\n\r\n<!-- ... -->\r\n\r\n    select * from bank.product p \r\n        join bank.account a on a.product_cd = p.product_cd;\r\n\r\n<!-- ... -->\r\n\r\n    select * from bank.account a \r\n        join bank.product p on p.product_cd = a.product_cd;\r\n\r\nDespite the small variations in syntax, db2expln reported that all three of the above queries had the same estimated cost of 38.671654. So, a join across two tables appears to be quicker than a cross operation. This is likely due to the significantly lower estimated cardinality of 84, which was ten times less than the cross operation.\r\n\r\nIt made sense that returning less data would be quicker, so the next step was to limit the selected result set to a subset of columns.\r\n\r\n    select a.status, p.name from bank.account a \r\n        join bank.product p on p.product_cd = a.product_cd;\r\n\r\nThe above query had a reported estimated cost of 38.671432, which was only slightly less than the join queries which selected all columns. However, it is worth noting that neither table contained columns with large amounts of data. The presence of more data in the excluded columns would have increased the cost gap.\r\n\r\nLastly, I decided to see what would happen when query complexity was increased. The following three queries all selected customers whom had at least one account that had made a transaction:\r\n\r\n    select distinct c.cust_id, c.cust_type_cd from bank.customer c \r\n        join bank.account a on a.cust_id = c.cust_id \r\n        join bank.acct_tran t on t.account_id = a.account_id;\r\n\r\n<!-- ... -->\r\n\r\n    select c.cust_id, c.cust_type_cd from bank.customer c\r\n        where exists ( \r\n            select * from bank.account a where a.cust_id = c.cust_id\r\n                and exists ( \r\n                    select * from bank.acct_tran t\r\n                        where t.account_id = a.account_id \r\n                )\r\n        );\r\n\r\n<!-- ... -->\r\n\r\n    select c.cust_id, c.cust_type_cd from bank.customer c\r\n        where exists ( \r\n            select * from bank.account a where a.cust_id = c.cust_id\r\n                and exists ( \r\n                    select * from bank.acct_tran t\r\n                        where t.account_id = a.account_id \r\n                        limit 1\r\n                ) limit 1\r\n        );\r\n\r\nAccording to db2expln, the two first of the above queries both had an estimated cost of 53.940853. The estimated cost of these two queries were higher than the other previously studied queries, but that was expected because these queries were run against significantly more data. Additionally, if this operation were to be split into multiple queries by the client, then the total estimated net cost would likely be much higher.\r\n\r\nLastly, there was one strange finding regarding the third query. The third query had an estimated cost of 103.375275, which was nearly double of the other two. The only syntactic difference between the second and third queries was that the third had two added ‘limit’ clauses. I do not have an explanation for this phenomenon. However, this does show that although many semantically equivalent queries also have the same estimated cost, some do not. Therefore, always be cautious when attempting to tune SQL queries.\r\n\r\n### Conclusion\r\n\r\nWith DB2’s provided RUNSTATS and db2expln utilities, analyzing SQL queries is a straightforward process. For this study, I used these two utilities to determine the cost of a number of SQL select queries. Of the tested queries, it was found that semantically identical but syntactically dissimilar select queries had the same estimated cost (with only one exception). Additionally, it was found that utilizing indexes and primary keys can greatly reduce estimated query cost. According to the tests that were run, indexing appears to be an effective way to tune SQL queries, while tweaking query syntax generally does not.\r\n\r\n### References\r\n\r\n* <a name="ref-db2expln" href="http://pic.dhe.ibm.com/infocenter/db2luw/v9r7/index.jsp?topic=%2Fcom.ibm.db2.luw.admin.cmd.doc%2Fdoc%2Fr0005736.html">db2expln - SQL and XQuery Explain command</a>. (n.d.). IBM DB2 9.7 for Linux, UNIX and Windows Information Center. Retrieved April 18, 2014.\r\n* Pay, L. (2002, December 14). IBM developerWorks. <a name="ref-pay" href="http://www.ibm.com/developerworks/data/library/techarticle/dm-0412pay/">RUNSTATS in DB2 UDB Version 8.2</a>. Retrieved April 21, 2014.
10	template	post
10	date	April 29, 2014
10	description	An introduction into the DB2 SQL query tuning process.
10	title	Experimenting With SQL Tuning In DB2
1		
1	markdown	url : /\r\ndescription : A software developer that strives to come up with simple solutions to complex problems.\r\ndesign : home\r\n\r\n<p class="intro">I am a software developer that strives to come up with simple solutions to complex problems. Contributor to many <a href="https://github.com/evantbyrne?tab=repositories">open-source projects</a>. Currently a part-time employee at <a href="http://workwithgrid.com">Grid</a> and full-time college senior.</p>\r\n\r\n## Featured Work\r\n\r\n* [Burner CMS](https://burnercms.com) - All\r\n* [Jim Leszczynski's Website](http://jimleszczynski.com) - Development\r\n* [Valkyrie](https://github.com/evantbyrne/valkyrie) - All\r\n\r\n<!--split-->\r\n\r\n## Contact Information\r\n\r\n* Phone: <a class="tel" href="tel:+1-810-728-1572">+1 (810) 728-1572</a>\r\n* E-Mail: [evantbyrne@gmail.com](mailto:evantbyrne@gmail.com)\r\n* Social: [Twitter](https://twitter.com/evantbyrne), [Github](https://github.com/evantbyrne)\r\n* Résumé: [HTML](/resume), [PDF](/static/uploads/evan-byrne-resume.pdf)
1	template	post
1	description	A software developer that strives to come up with simple solutions to complex problems.
1	design	home
1	content	<p class="intro">I am a software developer that strives to come up with simple solutions to complex problems. Contributor to many <a href="https://github.com/evantbyrne?tab=repositories">open-source projects</a>. Currently a part-time employee at <a href="http://workwithgrid.com">Grid</a> and full-time college senior.</p>\n\n<h2>Featured Work</h2>\n\n<ul>\n<li><a href="https://burnercms.com">Burner CMS</a> - All</li>\n<li><a href="http://jimleszczynski.com">Jim Leszczynski's Website</a> - Development</li>\n<li><a href="https://github.com/evantbyrne/valkyrie">Valkyrie</a> - All</li>\n</ul>\n\n
1	content_2	\n\n<h2>Contact Information</h2>\n\n<ul>\n<li>Phone: <a class="tel" href="tel:+1-810-728-1572">+1 (810) 728-1572</a></li>\n<li>E-Mail: <a href="mailto:evantbyrne@gmail.com">evantbyrne@gmail.com</a></li>\n<li>Social: <a href="https://twitter.com/evantbyrne">Twitter</a>, <a href="https://github.com/evantbyrne">Github</a></li>\n<li>Résumé: <a href="/resume">HTML</a>, <a href="/static/uploads/evan-byrne-resume.pdf">PDF</a></li>\n</ul>\n
10	content	<p><em>This paper was originally published on April 24 as a part of a school project. Also, these tests were run on DB2 Express-C edition installed on a Ubuntu VM, so your milage may vary.</em></p>\n\n<h3>Abstract</h3>\n\n<p>This paper provides a basic introduction into the SQL query tuning process in regards to the DB2 DBMS (Database Management System). Additionally, this paper will explore a few different SQL query optimization techniques while also analyzing the effectiveness of each method. The most effective method of decreasing SQL query cost appears to be column indexing.</p>\n\n<h3>The DB2 SQL Tuning Toolset</h3>\n\n<p>DB2 provides a number of tools which are designed to assist application developers and database administrators in the optimization of databases. This paper will introduce and utilize two tools which were designed to help tune SQL queries. The first of these tools is is the RUNSTATS SQL query. When used, the RUNSTATS command provides DB2 with statistical information, which can then be used by the DBMS and various DB2 utilities (<a href="#ref-pay">Pay, 2002</a>). The RUNSTATS query has a lot of options, but this paper will use the following RUNSTATS query format:</p>\n\n<pre>runstats on table &lt;table-name&gt; on all columns;</pre>\n\n<p>The above SQL query tells DB2 to gather statistical information on all columns of the specified table.</p>\n\n<p>Note: The <em>&lt;description&gt;</em> formatting tag convention is used throughout this paper to signify required command parameters. When using the provided example commands, these tags should be replaced with the appropriate data.</p>\n\n<p>The second tool that this study used was db2expln. The db2expln command line utility was designed to use statistics provided by RUNSTATS to provide detailed information on the data access plan that DB2 uses for various database queries (<a href="#ref-db2expln">db2expln</a>). There is also a GUI version of the db2expln called Visual Explain, but this paper will only explore the use of the command line version. As with the RUNSTATS query, the db2expln command has many options, but this study only used three. The format of the db2expln command used in this study was as follows:</p>\n\n<pre>db2expln -database &lt;database-name&gt; -statement &quot;&lt;sql-query&gt;&quot; -terminal</pre>\n\n<p>Running a command like the above will output various information about the provided SQL query in the terminal. This information includes estimated cost of the query, estimated cardinality of the query, and the data access path used by DB2. This paper will primarily use the estimated cost to determine the efficiency of various SQL queries in relation to other queries.</p>\n\n<h3>Experiment Structure</h3>\n\n<p>Both the RUNSTATS query and the db2expln command require an actual DB2 database with data in it to be useful. This study of various SQL queries used a database with tables of a structure similar to the following (within a schema named bank):</p>\n\n<pre>create table bank.product ( \n    product_cd varchar(10) not null, \n    name varchar(50) not null, \n    constraint pk_product primary key (product_cd) \n); \ncreate table bank.customer ( \n    cust_id integer not null generated always as identity(start with 1,  increment by 1, no cache), \n    fed_id varchar(12) not null, \n    cust_type_cd char(1) not null check(cust_type_cd IN ('I', 'B')),  address varchar(30), \n    city varchar(20), \n    state varchar(20), \n    postal_code varchar(10), \n    constraint pk_customer primary key (cust_id) \n); \ncreate table bank.account ( \n    account_id integer not null generated always as identity (  start with 1, increment by 1, no cache), \n    avail_balance decimal(10,2), \n    product_cd varchar(10) not null, \n    status char(6) check (status IN ('ACTIVE','CLOSED','FROZEN')),  constraint fk_product_cd foreign key (product_cd) \n    references bank.product (product_cd),  constraint pk_account primary key (account_id) \n); \ncreate table bank.acct_tran ( \n    txn_id integer not null generated always as identity (start with 1,  increment by 1, no cache), \n    account_id integer not null,  amount decimal(10,2) not null,\n    constraint fk_t_account_id foreign key (account_id)  references bank.account (account_id), \n    constraint pk_transaction primary key (txn_id) \n);</pre>\n\n<p>The actual database was larger and more complex than the above set of tables, but the given tables will suffice for the purposes of this paper. All tables were populated with semi-randomly generated data using an online data generation tool. After each alteration to the database structure and/or dataset was imported, then the RUNSTATS query was run for all affected tables. Finally, the db2expln command was then used to find the estimated cost associated with various SQL queries.</p>\n\n<h3>Simple Select Queries</h3>\n\n<p>The first type of queries tested were basic select queries with a single ‘where’ clause. For example, here is the first tested query:</p>\n\n<pre>select * from bank.account where status = 'ACTIVE';</pre>\n\n<p>According to db2expln, the above query had a cost of 25.807417. At that point, the status column on the account table had not been indexed. Next, as shown below, an index was created for the status column and RUNSTATS was run again.</p>\n\n<pre>create index index__account_status on bank.account (status); \nrunstats on table bank.account on all columns;</pre>\n\n<p>After the creation of the index, db2expln reported a cost of 14.259101 for the exact same select query. Adding the index almost doubled the estimated speed of the query.</p>\n\n<p>The next step was to see what effect that a ‘limit’ clause would have on a select query. The following query was analyzed with db2expln:</p>\n\n<pre>select * from bank.account where status = 'ACTIVE' limit 1;</pre>\n\n<p>This query had a reported cost of 12.870489, which was slightly lower than the query without a ‘limit’ clause. It is worth noting that the account table had only about 100 rows of data in it at the time of these tests, so it is possible that the gap in cost between these queries could increase significantly with a larger dataset. However, even with a small dataset, it is very clear that properly configured indexes can greatly speed up select queries.</p>\n\n<p>The last select query tested for this group also accessed the account table, but the ‘where’ clause did a comparison on the primary key column instead of the indexed status column. Below is the query:</p>\n\n<pre>select * from bank.account where account_id = 1;</pre>\n\n<p>The db2expln utility reported that the above query had an estimated cost of 12.870740, which is extremely close to the estimated cost of the previous query. This indicates that selecting by a primary key and selecting a single row by an indexed column have roughly the same cost.</p>\n\n<h3>Count Queries</h3>\n\n<p>After testing basic select queries, I was eager to see how quick count queries were in comparison. According to the db2expln utility, all of the following count queries had an estimated cost of only 0.048595 and returned the exact same results:</p>\n\n<pre>select count(*) from bank.account where status = 'ACTIVE';</pre>\n\n<!-- ... -->\n\n<pre>select count(1) from bank.account where status = 'ACTIVE';</pre>\n\n<!-- ... -->\n\n<pre>select count(*) from (select * from bank.account where status = 'ACTIVE');</pre>\n\n<p>In comparison to the previously measured select queries, the above count queries are all extremely quick. This means two things. First of all, unless used excessively, count queries will not be a bottleneck for the DBMS. Secondly, it shows that DB2 appears to handle syntactically different but semantically identical count queries equally efficiently.</p>\n\n<h3>Cross Operations And Join Queries</h3>\n\n<p>Up until this point, all of the discussed queries have been relatively simple, so it was no surprise that DB2 handled the semantically identical count queries all the same. It was time to see how DB2 would handle different queries that touched multiple tables. To start things off, the following cross operation was run through db2expln:</p>\n\n<pre>select * from bank.product, bank.account;</pre>\n\n<p>The above query had a whopping estimated cost of 52.059380. This is no surprise though, because it returned a result set with a cardinality of 840. Clearly, indiscriminately using cross query operations can be extremely expensive.</p>\n\n<p>Next, I looked at three different versions of a basic join query on the same two tables. The three queries looked like this:</p>\n\n<pre>select * from bank.product p, bank.account a \n    where p.product_cd = a.product_cd;</pre>\n\n<!-- ... -->\n\n<pre>select * from bank.product p \n    join bank.account a on a.product_cd = p.product_cd;</pre>\n\n<!-- ... -->\n\n<pre>select * from bank.account a \n    join bank.product p on p.product_cd = a.product_cd;</pre>\n\n<p>Despite the small variations in syntax, db2expln reported that all three of the above queries had the same estimated cost of 38.671654. So, a join across two tables appears to be quicker than a cross operation. This is likely due to the significantly lower estimated cardinality of 84, which was ten times less than the cross operation.</p>\n\n<p>It made sense that returning less data would be quicker, so the next step was to limit the selected result set to a subset of columns.</p>\n\n<pre>select a.status, p.name from bank.account a \n    join bank.product p on p.product_cd = a.product_cd;</pre>\n\n<p>The above query had a reported estimated cost of 38.671432, which was only slightly less than the join queries which selected all columns. However, it is worth noting that neither table contained columns with large amounts of data. The presence of more data in the excluded columns would have increased the cost gap.</p>\n\n<p>Lastly, I decided to see what would happen when query complexity was increased. The following three queries all selected customers whom had at least one account that had made a transaction:</p>\n\n<pre>select distinct c.cust_id, c.cust_type_cd from bank.customer c \n    join bank.account a on a.cust_id = c.cust_id \n    join bank.acct_tran t on t.account_id = a.account_id;</pre>\n\n<!-- ... -->\n\n<pre>select c.cust_id, c.cust_type_cd from bank.customer c\n    where exists ( \n        select * from bank.account a where a.cust_id = c.cust_id\n            and exists ( \n                select * from bank.acct_tran t\n                    where t.account_id = a.account_id \n            )\n    );</pre>\n\n<!-- ... -->\n\n<pre>select c.cust_id, c.cust_type_cd from bank.customer c\n    where exists ( \n        select * from bank.account a where a.cust_id = c.cust_id\n            and exists ( \n                select * from bank.acct_tran t\n                    where t.account_id = a.account_id \n                    limit 1\n            ) limit 1\n    );</pre>\n\n<p>According to db2expln, the two first of the above queries both had an estimated cost of 53.940853. The estimated cost of these two queries were higher than the other previously studied queries, but that was expected because these queries were run against significantly more data. Additionally, if this operation were to be split into multiple queries by the client, then the total estimated net cost would likely be much higher.</p>\n\n<p>Lastly, there was one strange finding regarding the third query. The third query had an estimated cost of 103.375275, which was nearly double of the other two. The only syntactic difference between the second and third queries was that the third had two added ‘limit’ clauses. I do not have an explanation for this phenomenon. However, this does show that although many semantically equivalent queries also have the same estimated cost, some do not. Therefore, always be cautious when attempting to tune SQL queries.</p>\n\n<h3>Conclusion</h3>\n\n<p>With DB2’s provided RUNSTATS and db2expln utilities, analyzing SQL queries is a straightforward process. For this study, I used these two utilities to determine the cost of a number of SQL select queries. Of the tested queries, it was found that semantically identical but syntactically dissimilar select queries had the same estimated cost (with only one exception). Additionally, it was found that utilizing indexes and primary keys can greatly reduce estimated query cost. According to the tests that were run, indexing appears to be an effective way to tune SQL queries, while tweaking query syntax generally does not.</p>\n\n<h3>References</h3>\n\n<ul>\n<li><a name="ref-db2expln" href="http://pic.dhe.ibm.com/infocenter/db2luw/v9r7/index.jsp?topic=%2Fcom.ibm.db2.luw.admin.cmd.doc%2Fdoc%2Fr0005736.html">db2expln - SQL and XQuery Explain command</a>. (n.d.). IBM DB2 9.7 for Linux, UNIX and Windows Information Center. Retrieved April 18, 2014.</li>\n<li>Pay, L. (2002, December 14). IBM developerWorks. <a name="ref-pay" href="http://www.ibm.com/developerworks/data/library/techarticle/dm-0412pay/">RUNSTATS in DB2 UDB Version 8.2</a>. Retrieved April 21, 2014.</li>\n</ul>\n
\.


--
-- Name: post__id; Type: CONSTRAINT; Schema: public; Owner: evanbyrne; Tablespace: 
--

ALTER TABLE ONLY post
    ADD CONSTRAINT post__id PRIMARY KEY (id);


--
-- PostgreSQL database dump complete
--

